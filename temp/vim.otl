[Vim] <url:http://www.vim.org/>
	安装
		linux
			git clone bashrc库，里面的init.sh里有完整步骤（建议不直接执行，阅读之后手动执行里面的步骤）
		windows
			先装网友编译的带lua的版本 <url:http://blog.lilydjwg.me/pages/19540.html#win-vim>
				该版本安装时会将当前安装的vim卸载
				python环境只支持2.7.xx（最新）以及3.4
				建议安装python 2.7（尝试可用），python3.5是确定不支持（ultisnips等会有问题），3.4未试过
				此版本会出现右键菜单失效的问题，可将lua版本备份（要复制，而非直接改名），然后安装正式版vim，再用备份的文件覆盖过去
			剩下步骤同linux
	vim命令行
		-u：指定vimrc
			注：vimrc和加载的其他脚本的地位，有一些微妙的不同
			-u NONE 表示不加载任何vimrc
		-S：指定加载的脚本
		-N nocompatible
	command 自定义命令
		命令:command 查看所有自定义的命令
		例 :command Lo TlistOpen
		自定义命令必须以大写开头，不能带下划线
		稍微复杂一点的 command! -nargs=+ -complete=command TabCmd call TabCmd(<q-args>) 
		详见 :h command，以及自己的vimrc里的例子
	execute 动态构建命令（vim中的eval）
		例
			let a='haha'
			let b='a'
			exe 'echo ' . b 可将'haha'显示
	normal
		例 :normal G，等价于在normal模式下直接按G
		默认映射会生效，使用normal! 忽略映射
	命令行（Ex模式，Ex命令） ex command
		q: 打开命令行窗口（编辑命令历史）
		多条命令用 | 来分隔, 如 call xx | ... 
	折叠
		创建折叠
			选中区域，zf
		如何同时使用多种foldmethod? 网上讨论 <url:http://superuser.com/questions/560149/is-there-a-way-to-use-multiple-vim-folding-methods-at-once>
		貌似outliner实现了这个功能，其foldmethod为默认值，但折叠得很好。可研究一下 <url:#r=vimoutliner>
	[register] 寄存器
		网上的一个文章(cheatsheet) <url:http://www.adp-gmbh.ch/vim/misc/register.html>
		复制到寄存器，比如到a寄存器
			"ayaw
			如果寄存器是大写，则是追加，比如"Ayy，则将内容追加到a寄存器
		粘贴寄存器的内容 "ap
		特殊寄存器
		+ 系统剪贴板，可以直接赋值将数据写到剪贴板，如let @+='hahaha'
		插入寄存器值：<c-r> 在插入模式和Ex命令下都可使用
			用法：<c-r>之后再按寄存器的名字即可粘贴进来
			如<c-r>a、<c-r>B
			插入变量 <c-r>=var
	map 快捷键映射
		一些不知道如何输入的快捷键，除了用特殊表示之外，还可以在插入模式先按<c-v>，然后再按对应的键（组合键）来录入
			这样可以解决一些复杂的组合键，比如带alt的键等
	autocmd 事件监听
		常用事件
			VimEnter: 启动vim
			GuiEnter: 同VimEnter，只不过是启动gvim
			BufRead: 与BufReadPost同义。完成从文件读取
			BufEnter: 进入buffer，从其他buffer切换过来也会触发，这是与BufRead的区别
	view 视图
		命令:mkview :loadview，保存当前文件的视图状态，保存路径在viewdir option里面
	加密文件
		加密
			执行:X，即弹出输入密码。成功后文件则为加密状态，再次打开文件则会提示输入密码
			密码输入错误会出现一些乱码，vim本身不负责判断密码的正确性
				这样的机制也增强了安全性
		取消密码
			执行:set key= 或者:X 直接回车（将密码设为空）则取消加密
	执行（运行）外部程序（命令）
		有同步和异步两种方式: !和!start <url:http://vim.wikia.com/wiki/Execute_external_programs_asynchronously_under_Windows>
			:!start cmd /k "npm run bp1"
			注意cmd后的命令一定要用双引号，不能用单引号!
		在vim脚本里执行外部命令可以用上call system(...)，但如果要处理管道的话，需要使用execute '!start cmd/k ...'，详见vimrc
	vim脚本语言
		字符串
			使用单引号' 不转义（与shell的机制有点类似）
		网友制作的一个速查cheatsheet <url:http://ricostacruz.com/cheatsheets/vimscript.html>
		函数
			内置函数
				system 调用系统命令（其中一个方法）
					例：call system('copy ' . expand('%') . ' ' . expand('~/node_playground/'))
					但这种方法有一个弊端是无法显示输出, 也无法与用户交互
					另一种方法比如execute '!echo haha'
	vim正则表达式
		以\v开头：与其他语言的正则表达式最接近的形式（我一直不知道这个用法，导致忍受了这么多年的vim的特殊正则表示法！）
	常用插件
		Vundle: 插件管家 <url:https://github.com/VundleVim/Vundle.vim>
			安装
				git clone https://github.com/VundleVim/Vundle.vim.git ~/.vim/bundle/Vundle.vim
				这是vundle官方建议的路径，之所以用这个路径，是为了方便后续vundle自己可以更新自己
		Shougo大神
			[Unite]
				哲学观: 任何的操作都可以统一为Unite xxx，然后得到一个列表，进而对列表里的项目进行各种操作
				进入到列表选择界面里的快捷键
					p 预览
					ctrl + p 打开预览窗口
				命令
					[:UniteResume] 回到上一次的unite，很有用
					[:UniteBookmarkAdd] 把当前编译的文件（也可以是目录）添加到unite内置的书签（bookmark）里
			VimShell <url:https://github.com/Shougo/vimshell.vim>
				依赖vimproc
				不支持中文utf-8
				windows上的坑：无法kill进程（比如一个服务），这个功能不支持的话，很难用起来
			VimProc <url:https://github.com/Shougo/vimproc.vim>
				安装需要自己编译动态库，预编译下载地址 <url:https://github.com/Shougo/vimproc.vim/releases>
				坑：预编译的vimproc_win64.dll不是到处都能使用的（比如surface就遇到这样的问题，安装mingw（注意要安装mingw-w64，而非原始的mingw）之后，按vimproc首页上的提示编译即可）
				小试: VimProcRead echo haha（仅初步判断是否安装成功，不能完全判断！比如不兼容的dll可能检测不出来，需要充分使用neocomplete以及unite等插件之后，才能确定）
				vimproc#system({expr} [, {input} [, {timeout}]]) 取代原生的system
					windows的路径，需要转义
			vimfiler
				很多操作，比如删除，复制，粘贴需要标记之后才能操作
			neocomplete（需要lua）<url:https://github.com/Shougo/neocomplete.vim>
				因此需要使用第三方网友制作的vim安装包
		设置水平标尺，一个网友的方法 <url:https://lists.freebsd.org/pipermail/freebsd-questions/2014-September/260815.html>
			一个关于colorcolumn的介绍 <url:http://superuser.com/questions/249779/how-to-setup-a-line-length-marker-in-vim-gvim>
		unite-everything <url:https://github.com/sgur/unite-everything>
			不支持中文utf-8
		vim-go <url:https://github.com/fatih/vim-go>
			安装go工具包 :GoInstallBinaries
		vim-snippets <url:https://github.com/honza/vim-snippets>
			目前没有直接使用，而是直接参考其代码，然后借鉴到自己维护的snips库里
		image.vim <url:https://github.com/ashisha/image.vim>
			好像是python的版本不兼容，没试用成
		流程图相关
			quafzi/vim-flow-diagram .flow格式的preview <url:https://github.com/quafzi/vim-flow-diagram>
			DrawIt <url:https://github.com/vim-scripts/DrawIt>
				一个简单的介绍 <url:http://www.thegeekstuff.com/2009/12/how-to-create-ascii-drawings-in-vim-editor-draw-boxes-lines-ellipses-arrows-inside-text-file/>
			某vi论坛：Creating & maintaining flowcharts in Vim <url:http://vi.stackexchange.com/questions/538/creating-maintaining-flowcharts-in-vim>
		效率、记事、思维导图
			utl.vim <url:https://github.com/vim-scripts/utl.vim>
				定位到vimhelp的位置：<url:vimhelp::ls>
				定位到指定文件的指定位置：<url:./filets/ChordPulse/单身情歌.cps#variant>
				执行vimscript、执行命令
					要escape两重"关"
					首先是url escape: 这是所有utl链接都面临的转义
					然后是双引号 escape: 这是utl会直接包一层双引号传给后面的逻辑
					因此 <url:vimscript:exe "ls">执行将会报错
					正确写法可以简写为<url:vimscript:ls>, <url:vimscript:exe 'ls'>或者<url:vimscript:exe \"ls\">, 
					另一例： <url:vimscript:exe \"normal \\%3cBslash%3ex\"> 将执行:exe "normal \<Bslash>x"，即通过自定义的快捷键\x来打开unite everything
			vimoutliner <url:https://github.com/vimoutliner/vimoutliner> [id=vimoutliner]
				我的fork <url:https://github.com/insanehui/vimoutliner>
				好像hoist功能有问题
		表格
			vim-table-mode <url:https://github.com/dhruvasagar/vim-table-mode>
				默认设置是 <leader>tm 来触发"表格编辑模式"，进入该模式之后就可以开始编辑表格了，同样的快捷键退出模式
				里面还介绍了通过abbrev来触发开启/关闭表格编辑模式的方法，非常值得编写脚本参考
		markdown-preview.vim
			小bug: 启动preview的时候浏览器和vim都会卡死没反应，这时候好像正确的做法是在浏览器地址栏上多敲几下回车
				强行关掉浏览器以及vim并不能解决问题
		AnsiEsc 显示终端的颜色代码 <url:https://github.com/vim-scripts/AnsiEsc.vim>
		vim-indentwise 在缩进的世界移动 <url:https://github.com/jeetsukumaran/vim-indentwise>
		UltiSnips
			给文件增加文件类型 :UltiSnipsAddFiletypes rst.lua
	插件机理
		插件加载机制
			~/.vimrc（当前用户home目录）
			$VIMRUNTIME/ 下特定文件名，目前知道的包括filetype.vim, ftplugin.vim, indent.vim等
			~/.vim/plugin 及子目录下 *.vim
			$VIMRUNTIME/plugin/ 及子目录下 *.vim
			$VIMRUNTIME/syntax/ 及子目录下 *.vim
			~/.vim/ftplugin 下的文件类型插件
			$VIMRUNTIME/ftplugin/ 下文件类型插件
			$VIMRUNTIME/indent/ 及子目录下 *.vim
			注：估计不同平台不同版本加载机制也会有差异~，比如在ubuntu上装的vim还会加载$VIMRUNTIME/../vimrc
			还有$VIMRUNTIME/../vimfiles 下面的相关目录
		语法类插件（文件类型插件）ftplugin目录
			坑：这里的脚本慎用set filetype...，自己在javascript.vim里设置set filetype+=.nodejs，企图令nodejs.snippets生效，结果导致无限递归死循环，结果只好用UltiSnipsAddFiletypes来实现
			文件类型插件的名称不能随意取，要求为以下格式中的一个
			ftplugin/<filetype>.vim
			ftplugin/<filetype>_<name>.vim
			ftplugin/<filetype>/<name>.vim
			比如用于cpp类型的多个插件可以为
			ftplugin/cpp.vim
			ftplugin/cpp_2.vim
			ftplugin/cpp/haha.vim
		[syntax] 语法高亮
			世界观: syntax（语法项）和highlight（配色）
				一个最基本的语法高亮配置示例
					" 定义语法项
					syntax keyword xType int long char
					syntax keyword xStatement if then else endif
					" 定义配色：将语法项与用于配色的基本项关联起来
					highlight link xType Type
					highlight link xStatement Statement
			ex命令
				- :syntax 查看定义的语法项
				- :highlight 查看定义的配色方案
	脚本语法
	奇技淫巧
		二进制编辑
			:%!xxd
			:%!xxd -r
		选中查找的文本，gn（gN，反方向选中），这是vim7.4才有的新功能
			在这之前，有一个v//e的方法（其中/e代表上一次查找的pattern）
	资源
		键盘图（cheatsheet） <url:./filets/vim_cheatsheet.png>
		官方文档笔记
			User Manual
				usr_01 About the manuals
					01.1	Two manuals
					01.2	Vim installed
					01.3	Using the Vim tutor 入门初体验的最佳教学
					01.4	Copyright
				usr_06 启用语法高亮及基本操作 Using syntax highlighting <url:http://vimdoc.sourceforge.net/htmldoc/usr_06.html>
					- :runtime syntax/colortest.vim 将打开一个测试窗口里面有各种颜色的文本
					- :TOhtml 将语法高亮转成html的一个工具
				usr_44 自定义语法高亮 <url:http://vimdoc.sourceforge.net/htmldoc/usr_44.html> <url:vimhelp:usr_44.txt>
					44.1 基本语法命令 Basic syntax commands 
						- :syntax clear 清除语法定义，用于方便作试验
							比如想从0开始测试语法高亮，则可以使用该命令
						指定语法是否大小写敏感
					44.2 Keywords
					44.4 Regions <url:vimhelp:usr_44#*44.4>
			User Reference
				intro.txt 简介
					1. Introduction			|intro|
					2. Vim on the internet		|internet|
					3. Credits			|credits|
					4. Notation	|notation| 包含特殊按键、特殊字符|key-notaion|的表示
					5. Modes, introduction		|vim-modes-intro|
					6. Switching from mode to mode	|mode-switching|
					7. The window contents		|window-contents|
					8. Definitions			|definitions|
				filetype.txt 文件类型机制 <url:http://vimdoc.sourceforge.net/htmldoc/filetype.html>
					1. Filetypes
						讲解 :filetype on 到底做了什么事情
							执行$VIMRUNTIME/filetype.vim
								runtime ftdetect/下的脚本来检测文件类型
									该目录约定用于存放识别文件类型的脚本
							因此此处仅为文件类型检测（filetype detection），未包含其他插件行为
						真正的插件功能似乎由:filetype indent on, :filetype plugin on, :syntax on等来启用
							粗略理解，plugin on对应启用 $rtp/ftplugin/里的脚本，indent on则启用$rtp/indent/下的脚本，同理syntax on对应 syntax/
					2. Filetype plugin				|filetype-plugins|
					3. Docs for the default filetype plugins.	|ftplugin-docs|
				syntax.txt 语法 <url:http://vimdoc.sourceforge.net/htmldoc/syntax.html>
					列举一些标准的语法项 <url:vimhelp:group-name>
					conceal 隐藏项 <url:vimhelp:conceal>
						见 <url:vimhelp:'conceallevel'> <url:vimhelp:'concealcursor'>
		官网wiki
			文章总表 <url:http://vim.wikia.com/wiki/Special:AllPages>
			95 Capture ex command output 获取（读取）命令(ex command)输出 <url:https://vim.fandom.com/wiki/Capture_ex_command_output>
			1561 Creating your own syntax files 创建自己的语法文件 <url:https://vim.fandom.com/wiki/Creating_your_own_syntax_files>
				通过一个实例来讲解
			filetype文件类型
				Filetype.vim 1606 <url:http://vim.wikia.com/wiki/Filetype.vim>
			mapping
				1516 Mapping keys in Vim - Tutorial (Part 1) <url:http://vim.wikia.com/wiki/Mapping_keys_in_Vim_-_Tutorial_(Part_1)>
				1526 Mapping keys in Vim - Tutorial (Part 2) <url:http://vim.wikia.com/wiki/Mapping_keys_in_Vim_-_Tutorial_(Part_2)>
				1556 Mapping keys in Vim - Tutorial (Part 3) <url:http://vim.wikia.com/wiki/Mapping_keys_in_Vim_-_Tutorial_(Part_3)>
			读取用户输入 User input from a script <url:http://vim.wikia.com/wiki/User_input_from_a_script>
			搜索选中的文本 Search for visually selected text <url:http://vim.wikia.com/wiki/Search_for_visually_selected_text>
			移到下一个缩进 Move to next/previous line with same indentation <url:http://vim.wikia.com/wiki/Move_to_next/previous_line_with_same_indentation>
		Learn Vimscript the Hard Way <url:http://learnvimscriptthehardway.stevelosh.com/>
			Execute <url:http://learnvimscriptthehardway.stevelosh.com/chapters/28.html>
			Normal <url:http://learnvimscriptthehardway.stevelosh.com/chapters/29.html>
			Execute Normal! <url:http://learnvimscriptthehardway.stevelosh.com/chapters/30.html>
			Basic Regular Expressions <url:http://learnvimscriptthehardway.stevelosh.com/chapters/31.html>
		似乎还有一个讲vim技巧的网站 <url:vimcasts.org>
	修炼
		是时候安装一个vim的git插件了
		linux vim搞定lua和python，进而使用vim shell，好好研究一下
			vim官网的正规编译流程 <url:http://www.vim.org/download.php>
			mac网友的一条命令仅供参考 <url:http://www.cnblogs.com/zhongfq/p/4158203.html>
			网友<url:http://www.cnblogs.com/spch2008/p/4593370.html>
			YCM的示例 <url:https://github.com/Valloric/YouCompleteMe/wiki/Building-Vim-from-source>
			网友2 <url:http://www.cnblogs.com/spch2008/p/4593370.html>
		snips的功能比想象中的强大！好好学习一下其文档。掌握这些技巧可以更快提高编码速度
			html的snips: html5里，有一些替换的例子，好好学习一下
		uts里面一些奇怪的符号，其实可以试着将这些行为封装成vim函数，这样用起来会更简洁
		定义一些快捷操作，使得可以很方便地连接文档的两个地方, 比如在一个地方按下a，再到另一个地方按下b，就完成了b->a的连接, 通过utl的id机制
		可以写一些执行简短js的utl（或者换一个思路不用utl，选中一部分js，然后用babel-node将它执行）
		让snips如何自动获取当前文件名？这样可以快速生成react组件的js文件
	坑
		在一些linux系统上，比如华为云的机器，vim命令启动的是一个阉割版的vim，要想使用完整版的vim功能，要使用vi命令
